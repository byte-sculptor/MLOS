<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MLOS</title>
    <link>https://microsoft.github.io/MLOS/documentation/</link>
    <description>Recent content on MLOS</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://microsoft.github.io/MLOS/documentation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/01-Prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/01-Prerequisites/</guid>
      <description>Prerequisites for building and using MLOS These are one-time setup instructions that should be executed prior to following the build instructions in 02-Build.md
Contents  Prerequisites for building and using MLOS  Contents Clone the repository Python quickstart Linux  Linux Distribution Requirements Option 1: Linux Docker Build Env  Install Docker Build the Docker Image  Pull the upstream docker image Local docker image build     Option 2: Manual Build Tools Install Install Python on Linux  Option 1: Docker Python Install Option 2: Using Conda     Windows  Step 1: Install Python Step 2: Install Docker on Windows Step 3: Install Windows Build Tools Step 4: Build the Docker image      MLOS currently supports 64-bit Intel/AMD platforms, though ARM64 support is under development.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/02-Build/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/02-Build/</guid>
      <description>Build Instructions for MLOS Prerequisites See 01-Prerequisites.md for initial build tools setup instructions.
There are different instructions according to the environment setup you chose.
Contents  Build Instructions for MLOS  Prerequisites Contents Docker  Create a new container instance  Using the upstream container image Using the locally built image   Other useful docker commands Start an existing container instance Get a new shell in a running container instance   Linux  CLI: make VSCode   Windows  CLI: msbuild Building with Visual Studio      Docker If you chose to use the Docker build environment and have already built or pulled a container image using the instructions in 01-Prerequisites.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/03-ExampleUsage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/03-ExampleUsage/</guid>
      <description>Examples of using MLOS to optimize a system TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/04-Test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/04-Test/</guid>
      <description>Test Instructions for MLOS Contents  Test Instructions for MLOS  Contents Linux Tests  Run C# Tests on Linux Run C++ Tests on Linux Run Python Tests on Linux   Windows  Run C#/C++ Tests on Windows Run Python Tests on Windows      Linux Tests To build and test all of the MLOS code at or below the current folder, regardless of language, run:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/05-Debug/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/05-Debug/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/CodingStandard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/CodingStandard/</guid>
      <description>MLOS Coding Standards MLOS uses and supports multiple languages. Here we document the coding styles and standards we attempt to adhere to and the tools we use to achieve that.
C++ For C++ we mostly try to follow the Google C++ style guidelines, with a few modifications.
Currently we rely on uncrustify to help enforce these rules (plus a little bit of human review).
See build/uncrustify/README.md for additional information.
Though we attempt to make it somewhat readable, we exclude code generated by MLOS from these strict style checks.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/Glossary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/Glossary/</guid>
      <description>MLOS Terms Glossary TODO</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/MlosArchitecture/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/MlosArchitecture/</guid>
      <description>MLOS Architecture This document provides a brief overview of the MLOS architecture for supporting Machine Learning Optimized Systems.
 MLOS Architecture  High Level Description  Principles Workflows   Architecture Diagram  Main components Shared Memory Regions Target Process  Mlos.Core Shared Channel   Mlos.Agent  Mlos.NetCore Settings registry assemblies Grpc Server Experiment management     Implementation details    High Level Description At a high level, MLOS provides infrastructure to support instance-specific tuning systems software (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/RepoOrganization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/RepoOrganization/</guid>
      <description>Repo Organization Some notes on the directory layout organization in this repo.
  There are build files (e.g. dirs.proj for msbuild or dotnet build, or Makefiles for make) in most directories to allow easy recursive building of that subtree you happen to be in.
 Note: we provide Makefile wrappers in most directories to simply help invoke cmake and the Makefiles it generates
   build/ contains configuration related to building MLOS components</description>
    </item>
    
    <item>
      <title></title>
      <link>https://microsoft.github.io/MLOS/documentation/Troubleshooting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://microsoft.github.io/MLOS/documentation/Troubleshooting/</guid>
      <description>Troubleshooting Tips Here are some common tips for troubleshooting various issues.
Contents  Troubleshooting Tips  Contents Editor Integrations  VSCode in WSL  &amp;ldquo;Missing .Net SDK&amp;rdquo; message when executing code . in WSL        Editor Integrations VSCode in WSL &amp;ldquo;Missing .Net SDK&amp;rdquo; message when executing code . in WSL The Omnisharp plugin for VSCode may have trouble finding the dotnet setup locally for the MLOS repo in tools/, even if you source the scripts/init.</description>
    </item>
    
  </channel>
</rss>