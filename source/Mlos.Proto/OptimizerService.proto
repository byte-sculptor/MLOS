syntax = "proto3";

package mlos.optimizer_service;

// Exposes Bayesian Optimizer's functionality over gRPC.
//
service OptimizerService
{
    // Creates an optimizer with the specified configuration.
    //
    rpc CreateOptimizer(CreateOptimizerRequest) returns (OptimizerHandle);

    // Returns information about optimizers configuration and optimization problem.
    //
    rpc GetOptimizerInfo(OptimizerHandle) returns (OptimizerInfo);
    
    // Request a suggestion.
    //
    rpc Suggest(SuggestRequest) returns (ConfigurationParameters);

    // Adds an observation to the optimizer's data set.
    //
    rpc RegisterObservation(RegisterObservationRequest) returns (Empty);

    // Adds observations to the optimizer's data set.
    //
    rpc RegisterObservations(RegisterObservationsRequest) returns (Empty);

    // Like ping.
    //
    rpc Echo(Empty) returns (Empty);
};

// A request to create an optimizer.
//
message CreateOptimizerRequest
{
    OptimizationProblem OptimizationProblem = 1;
    string OptimizerConfigName = 2;
    string OptimizerConfig = 3;
};


// A request to create a suggestion given specified context.
//
message SuggestRequest
{
    OptimizerHandle OptimizerHandle = 1;
    bool Random = 2;
    Context Context = 3;
};


// A request to add an observation to the optimizer's data set.
//
message RegisterObservationRequest
{
    OptimizerHandle OptimizerHandle = 1;
    Observation Observation = 2;
};

// A request to add a observations to the optimizer's data set.
//
message RegisterObservationsRequest
{
    OptimizerHandle OptimizerHandle = 1;
    Observations Observations = 2;
};

// A list of observations. TODO: make more sensible the difference between Observation and Observations. 
// Specifically - they can probably be the same thing, but changing the name of Observation to Observations would
// break Greg's PR. 
// 
message Observations
{
    Features Features = 1;
    ObjectiveValues ObjectiveValues = 2;
};

// A representation of an optimization problem.
//
message OptimizationProblem
{
    Hypergrid ParameterSpace = 1;
    Hypergrid ContextSpace = 2;
    Hypergrid ObjectiveSpace = 3;
    repeated Objective Objectives = 4;
};

// An opaque handle to the optimizer that the client passes along with each request.
//
message OptimizerHandle
{
    string Id = 1;
};

// Represents information about an optimizer instance, including its configuration, optimization problem, and handle
//
message OptimizerInfo
{
    OptimizerHandle OptimizerHandle = 1;
    string OptimizerConfigJsonString = 2;
    OptimizationProblem OptimizationProblem = 3;
};

// A representation of a single observation to be added to the optimizer's data set.
//
message Observation
{
    Features Features = 1;
    ObjectiveValues ObjectiveValues = 2;
};

// A representation of features for the optimizer's surrogate models to operate on.
//
message Features
{
    string FeaturesJsonString = 1;
};

// Serialized configuration parameters.
//
message ConfigurationParameters
{
    string ParametersJsonString = 1;
};

// Serialized context values.
//
message Context
{
    string ContextJsonString = 1;
};

// Representation of the ObjectiveValues.
//
message ObjectiveValues
{
    string ObjectiveValuesJsonString = 1;
};

// Serialized representation of a Hypergrid.
//
message Hypergrid
{
    string HypergridJsonString = 1;
};

// Representation of a single objective.
//
message Objective
{
    string Name = 1;
    bool Minimize = 2;
};

// A message containing a single boolean value.
//
message SimpleBoolean
{
    bool Value = 1;
};

// A message containing a single string value.
//
message SimpleString
{
    string Value = 1;
}

// A convenience message for optimizer functions that return nothing.
//
message Empty
{
};

////// All Hypergrid Types

message EmptyDimension
{
    string Name = 1;
    string Type = 2;
};

message ContinuousDimension
{
    string Name = 1;
    double Min = 2;
    double Max = 3;
    bool IncludeMin = 4;
    bool IncludeMax = 5;
};

message DiscreteDimension
{
    string Name = 1;
    int64 Min = 2;
    int64 Max = 3;
};

message OrdinalDimension
{
    string Name = 1;
    bool Ascending = 2;
    repeated PrimitiveValue OrderedValues = 3;
};

message CategoricalDimension
{
    string Name = 1;
    repeated PrimitiveValue Values = 2;
};

message CompositeDimension
{
    string Name = 1;
    string ChunkType = 2;
    repeated SimpleDimensionUnion Chunks = 3;
};

message PrimitiveValue
{
    oneof Value {
        int64 IntValue = 1;
        double DoubleValue = 2;
        bool BoolValue = 3;
        string StringValue = 4;
    }
};

message SimpleDimensionUnion
{
    oneof Dimension {
        ContinuousDimension ContinuousDimension = 1;
        DiscreteDimension DiscreteDimension = 2;
        OrdinalDimension OrdinalDimension = 3;
        CategoricalDimension CategoricalDimension = 4;
    }
};

message AllDimensionUnion
{
    oneof Dimension {
        ContinuousDimension ContinuousDimension = 1;
        DiscreteDimension DiscreteDimension = 2;
        OrdinalDimension OrdinalDimension = 3;
        CategoricalDimension CategoricalDimension = 4;
        EmptyDimension EmptyDimension = 5;
        CompositeDimension CompositeDimension = 6;
    }
};

message SimpleHypergrid
{
    string Name = 1;
    repeated AllDimensionUnion Dimensions = 2;
    repeated GuestSubgrid GuestSubgrids = 3;
};

message GuestSubgrid
{
    SimpleHypergrid Subgrid = 1;
    AllDimensionUnion ExternalPivotDimension = 2;
};

message Point
{
    repeated KeyValuePair KeyValuePair = 1;
};

message KeyValuePair
{
    string Key = 1;
    DimensionValue Value = 2;
};

message DimensionValue
{
    PrimitiveValue Value = 1;
    Point Point = 2;
};
