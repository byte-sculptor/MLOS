syntax = "proto3";
package mlos.optimizer_service;
import "MlosCommonMessageTypes.proto";

option csharp_namespace = "Mlos.OptimizerService";

// Exposes Bayesian Optimizer's functionality over gRPC.
//
service OptimizerService
{
    // Creates an optimizer with the specified configuration.
    //
    rpc CreateOptimizer(CreateOptimizerRequest) returns (mlos_common_message_types.OptimizerHandle);
    
    // Request a suggestion.
    //
    rpc Suggest(SuggestRequest) returns (mlos_common_message_types.ConfigurationParameters);

    // Adds an observation to the optimizer's data set.
    //
    rpc RegisterObservation(RegisterObservationRequest) returns (mlos_common_message_types.Empty);

    // Adds observations to the optimizer's data set.
    //
    rpc RegisterObservations(RegisterObservationsRequest) returns (mlos_common_message_types.Empty);

    // Like ping.
    //
    rpc Echo(mlos_common_message_types.Empty) returns (mlos_common_message_types.Empty);
};

// A request to create an optimizer.
//
message CreateOptimizerRequest
{
    mlos_common_message_types.OptimizationProblem OptimizationProblem = 1;
    string OptimizerConfigName = 2;
    string OptimizerConfig = 3;
};


// A request to create a suggestion given specified context.
//
message SuggestRequest
{
    mlos_common_message_types.OptimizerHandle OptimizerHandle = 1;
    bool Random = 2;
    mlos_common_message_types.Context Context = 3;
};


// A request to add an observation to the optimizer's data set.
//
message RegisterObservationRequest
{
    mlos_common_message_types.OptimizerHandle OptimizerHandle = 1;
    mlos_common_message_types.Observation Observation = 2;
};

// A request to add a observations to the optimizer's data set.
//
message RegisterObservationsRequest
{
    mlos_common_message_types.OptimizerHandle OptimizerHandle = 1;
    mlos_common_message_types.Observations Observations = 2;
};