# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from mlos.Grpc import OptimizerMonitoringService_pb2 as mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2


class OptimizerMonitoringServiceStub(object):
    """Exposes Bayesian Optimizer's functionality over gRPC.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListExistingOptimizers = channel.unary_unary(
                '/OptimizerMonitoringService/ListExistingOptimizers',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerList.FromString,
                )
        self.GetOptimizerInfo = channel.unary_unary(
                '/OptimizerMonitoringService/GetOptimizerInfo',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerInfo.FromString,
                )
        self.GetOptimizerConvergenceState = channel.unary_unary(
                '/OptimizerMonitoringService/GetOptimizerConvergenceState',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerConvergenceState.FromString,
                )
        self.ComputeGoodnessOfFitMetrics = channel.unary_unary(
                '/OptimizerMonitoringService/ComputeGoodnessOfFitMetrics',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.SimpleString.FromString,
                )
        self.IsTrained = channel.unary_unary(
                '/OptimizerMonitoringService/IsTrained',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.SimpleBoolean.FromString,
                )
        self.Predict = channel.unary_unary(
                '/OptimizerMonitoringService/Predict',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.PredictRequest.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.PredictResponse.FromString,
                )
        self.GetAllObservations = channel.unary_unary(
                '/OptimizerMonitoringService/GetAllObservations',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Observations.FromString,
                )
        self.Echo = channel.unary_unary(
                '/OptimizerMonitoringService/Echo',
                request_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.SerializeToString,
                response_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.FromString,
                )


class OptimizerMonitoringServiceServicer(object):
    """Exposes Bayesian Optimizer's functionality over gRPC.

    """

    def ListExistingOptimizers(self, request, context):
        """Returns a list of existing optimizer instances.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptimizerInfo(self, request, context):
        """Returns information about optimizers configuration and optimization problem.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetOptimizerConvergenceState(self, request, context):
        """Returns the current optimizer convergence state.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ComputeGoodnessOfFitMetrics(self, request, context):
        """Returns the computed goodness of fit metrics.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsTrained(self, request, context):
        """Check if optimizer has been trained.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Predict(self, request, context):
        """Produces a prediction for specified features.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllObservations(self, request, context):
        """Returns all observations registered for a given optimizer.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Echo(self, request, context):
        """Like ping.

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OptimizerMonitoringServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListExistingOptimizers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListExistingOptimizers,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerList.SerializeToString,
            ),
            'GetOptimizerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptimizerInfo,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerInfo.SerializeToString,
            ),
            'GetOptimizerConvergenceState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetOptimizerConvergenceState,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerConvergenceState.SerializeToString,
            ),
            'ComputeGoodnessOfFitMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.ComputeGoodnessOfFitMetrics,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.SimpleString.SerializeToString,
            ),
            'IsTrained': grpc.unary_unary_rpc_method_handler(
                    servicer.IsTrained,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.SimpleBoolean.SerializeToString,
            ),
            'Predict': grpc.unary_unary_rpc_method_handler(
                    servicer.Predict,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.PredictRequest.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.PredictResponse.SerializeToString,
            ),
            'GetAllObservations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllObservations,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Observations.SerializeToString,
            ),
            'Echo': grpc.unary_unary_rpc_method_handler(
                    servicer.Echo,
                    request_deserializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.FromString,
                    response_serializer=mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'OptimizerMonitoringService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class OptimizerMonitoringService(object):
    """Exposes Bayesian Optimizer's functionality over gRPC.

    """

    @staticmethod
    def ListExistingOptimizers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/ListExistingOptimizers',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOptimizerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/GetOptimizerInfo',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetOptimizerConvergenceState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/GetOptimizerConvergenceState',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerConvergenceState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ComputeGoodnessOfFitMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/ComputeGoodnessOfFitMetrics',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.SimpleString.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsTrained(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/IsTrained',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.SimpleBoolean.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/Predict',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.PredictRequest.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.PredictResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllObservations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/GetAllObservations',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.OptimizerHandle.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Observations.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Echo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/OptimizerMonitoringService/Echo',
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.SerializeToString,
            mlos_dot_Grpc_dot_OptimizerMonitoringService__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
